#region (c) 2010-2012 Lokad - CQRS- New BSD License 

// Copyright (c) Lokad 2010-2012, http://www.lokad.com
// This code is released as Open Source under the terms of the New BSD Licence

#endregion

using System;
using System.Runtime.Serialization;

namespace Sample
{

    #region Generated by Lokad Code DSL

    [DataContract(Namespace = "Sample")]
    public class InstanceStarted : IFunctionalEvent
    {
        [DataMember(Order = 1)]
        public string CodeVersion { get; private set; }

        [DataMember(Order = 2)]
        public string Role { get; private set; }

        [DataMember(Order = 3)]
        public string Instance { get; private set; }

        InstanceStarted() {}

        public InstanceStarted(string codeVersion, string role, string instance)
        {
            CodeVersion = codeVersion;
            Role = role;
            Instance = instance;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class SendMailMessage : IFunctionalCommand
    {
        [DataMember(Order = 1)]
        public Email[] To { get; private set; }

        [DataMember(Order = 2)]
        public string Subject { get; private set; }

        [DataMember(Order = 3)]
        public string Body { get; private set; }

        [DataMember(Order = 4)]
        public bool IsHtml { get; private set; }

        [DataMember(Order = 5)]
        public Email[] Cc { get; private set; }

        [DataMember(Order = 6)]
        public Email OptionalSender { get; private set; }

        [DataMember(Order = 7)]
        public Email OptionalReplyTo { get; private set; }

        SendMailMessage()
        {
            To = new Email[0];
            Cc = new Email[0];
        }

        public SendMailMessage(Email[] to, string subject, string body, bool isHtml, Email[] cc, Email optionalSender,
            Email optionalReplyTo)
        {
            To = to;
            Subject = subject;
            Body = body;
            IsHtml = isHtml;
            Cc = cc;
            OptionalSender = optionalSender;
            OptionalReplyTo = optionalReplyTo;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class MailMessageSent : IFunctionalEvent
    {
        [DataMember(Order = 1)]
        public Email[] To { get; private set; }

        [DataMember(Order = 2)]
        public string Subject { get; private set; }

        [DataMember(Order = 3)]
        public string Body { get; private set; }

        [DataMember(Order = 4)]
        public bool IsHtml { get; private set; }

        [DataMember(Order = 5)]
        public Email[] Cc { get; private set; }

        [DataMember(Order = 6)]
        public Email OptionalSender { get; private set; }

        [DataMember(Order = 7)]
        public Email OptionalReplyTo { get; private set; }

        MailMessageSent()
        {
            To = new Email[0];
            Cc = new Email[0];
        }

        public MailMessageSent(Email[] to, string subject, string body, bool isHtml, Email[] cc, Email optionalSender,
            Email optionalReplyTo)
        {
            To = to;
            Subject = subject;
            Body = body;
            IsHtml = isHtml;
            Cc = cc;
            OptionalSender = optionalSender;
            OptionalReplyTo = optionalReplyTo;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class CreateSecurityAggregate : ICommand<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        CreateSecurityAggregate() {}

        public CreateSecurityAggregate(SecurityId id)
        {
            Id = id;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class CreateSecurityFromRegistration : ICommand<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public RegistrationId RegistrationId { get; private set; }

        [DataMember(Order = 3)]
        public string Login { get; private set; }

        [DataMember(Order = 4)]
        public string Pwd { get; private set; }

        [DataMember(Order = 5)]
        public string DisplayName { get; private set; }

        [DataMember(Order = 6)]
        public string OptionalIdentity { get; private set; }

        CreateSecurityFromRegistration() {}

        public CreateSecurityFromRegistration(SecurityId id, RegistrationId registrationId, string login, string pwd,
            string displayName, string optionalIdentity)
        {
            Id = id;
            RegistrationId = registrationId;
            Login = login;
            Pwd = pwd;
            DisplayName = displayName;
            OptionalIdentity = optionalIdentity;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class SecurityAggregateCreated : IEvent<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        SecurityAggregateCreated() {}

        public SecurityAggregateCreated(SecurityId id)
        {
            Id = id;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class AddSecurityPassword : ICommand<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public string DisplayName { get; private set; }

        [DataMember(Order = 3)]
        public string Login { get; private set; }

        [DataMember(Order = 4)]
        public string Password { get; private set; }

        AddSecurityPassword() {}

        public AddSecurityPassword(SecurityId id, string displayName, string login, string password)
        {
            Id = id;
            DisplayName = displayName;
            Login = login;
            Password = password;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class SecurityPasswordAdded : IEvent<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public UserId UserId { get; private set; }

        [DataMember(Order = 3)]
        public string DisplayName { get; private set; }

        [DataMember(Order = 4)]
        public string Login { get; private set; }

        [DataMember(Order = 5)]
        public string PasswordHash { get; private set; }

        [DataMember(Order = 6)]
        public string PasswordSalt { get; private set; }

        [DataMember(Order = 7)]
        public string Token { get; private set; }

        SecurityPasswordAdded() {}

        public SecurityPasswordAdded(SecurityId id, UserId userId, string displayName, string login, string passwordHash,
            string passwordSalt, string token)
        {
            Id = id;
            UserId = userId;
            DisplayName = displayName;
            Login = login;
            PasswordHash = passwordHash;
            PasswordSalt = passwordSalt;
            Token = token;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class AddSecurityIdentity : ICommand<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public string DisplayName { get; private set; }

        [DataMember(Order = 3)]
        public string Identity { get; private set; }

        AddSecurityIdentity() {}

        public AddSecurityIdentity(SecurityId id, string displayName, string identity)
        {
            Id = id;
            DisplayName = displayName;
            Identity = identity;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class SecurityIdentityAdded : IEvent<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public UserId UserId { get; private set; }

        [DataMember(Order = 3)]
        public string DisplayName { get; private set; }

        [DataMember(Order = 4)]
        public string Identity { get; private set; }

        [DataMember(Order = 5)]
        public string Token { get; private set; }

        SecurityIdentityAdded() {}

        public SecurityIdentityAdded(SecurityId id, UserId userId, string displayName, string identity, string token)
        {
            Id = id;
            UserId = userId;
            DisplayName = displayName;
            Identity = identity;
            Token = token;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class RemoveSecurityItem : ICommand<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public UserId UserId { get; private set; }

        RemoveSecurityItem() {}

        public RemoveSecurityItem(SecurityId id, UserId userId)
        {
            Id = id;
            UserId = userId;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class SecurityItemRemoved : IEvent<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public UserId UserId { get; private set; }

        [DataMember(Order = 3)]
        public string Lookup { get; private set; }

        [DataMember(Order = 4)]
        public string Type { get; private set; }

        SecurityItemRemoved() {}

        public SecurityItemRemoved(SecurityId id, UserId userId, string lookup, string type)
        {
            Id = id;
            UserId = userId;
            Lookup = lookup;
            Type = type;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class UpdateSecurityItemDisplayName : ICommand<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public UserId UserId { get; private set; }

        [DataMember(Order = 3)]
        public string DisplayName { get; private set; }

        UpdateSecurityItemDisplayName() {}

        public UpdateSecurityItemDisplayName(SecurityId id, UserId userId, string displayName)
        {
            Id = id;
            UserId = userId;
            DisplayName = displayName;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class SecurityItemDisplayNameUpdated : IEvent<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public UserId UserId { get; private set; }

        [DataMember(Order = 3)]
        public string DisplayName { get; private set; }

        SecurityItemDisplayNameUpdated() {}

        public SecurityItemDisplayNameUpdated(SecurityId id, UserId userId, string displayName)
        {
            Id = id;
            UserId = userId;
            DisplayName = displayName;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class SecurityRegistrationProcessCompleted : IEvent<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public string DisplayName { get; private set; }

        [DataMember(Order = 3)]
        public UserId UserId { get; private set; }

        [DataMember(Order = 4)]
        public string Token { get; private set; }

        [DataMember(Order = 5)]
        public RegistrationId RegistrationId { get; private set; }

        SecurityRegistrationProcessCompleted() {}

        public SecurityRegistrationProcessCompleted(SecurityId id, string displayName, UserId userId, string token,
            RegistrationId registrationId)
        {
            Id = id;
            DisplayName = displayName;
            UserId = userId;
            Token = token;
            RegistrationId = registrationId;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class AddPermissionToSecurityItem : ICommand<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public UserId UserId { get; private set; }

        [DataMember(Order = 3)]
        public string Permission { get; private set; }

        AddPermissionToSecurityItem() {}

        public AddPermissionToSecurityItem(SecurityId id, UserId userId, string permission)
        {
            Id = id;
            UserId = userId;
            Permission = permission;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class PermissionAddedToSecurityItem : IEvent<SecurityId>
    {
        [DataMember(Order = 1)]
        public SecurityId Id { get; private set; }

        [DataMember(Order = 2)]
        public UserId UserId { get; private set; }

        [DataMember(Order = 3)]
        public string DisplayName { get; private set; }

        [DataMember(Order = 4)]
        public string Permission { get; private set; }

        [DataMember(Order = 5)]
        public string Token { get; private set; }

        PermissionAddedToSecurityItem() {}

        public PermissionAddedToSecurityItem(SecurityId id, UserId userId, string displayName, string permission,
            string token)
        {
            Id = id;
            UserId = userId;
            DisplayName = displayName;
            Permission = permission;
            Token = token;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class CreateUser : ICommand<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public SecurityId SecurityId { get; private set; }

        CreateUser() {}

        public CreateUser(UserId id, SecurityId securityId)
        {
            Id = id;
            SecurityId = securityId;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class UserCreated : IEvent<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public SecurityId SecurityId { get; private set; }

        [DataMember(Order = 3)]
        public TimeSpan ActivityThreshold { get; private set; }

        UserCreated() {}

        public UserCreated(UserId id, SecurityId securityId, TimeSpan activityThreshold)
        {
            Id = id;
            SecurityId = securityId;
            ActivityThreshold = activityThreshold;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class ReportUserLoginFailure : ICommand<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public DateTime TimeUtc { get; private set; }

        [DataMember(Order = 3)]
        public string Ip { get; private set; }

        ReportUserLoginFailure() {}

        public ReportUserLoginFailure(UserId id, DateTime timeUtc, string ip)
        {
            Id = id;
            TimeUtc = timeUtc;
            Ip = ip;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class UserLoginFailureReported : IEvent<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public DateTime TimeUtc { get; private set; }

        [DataMember(Order = 3)]
        public SecurityId SecurityId { get; private set; }

        [DataMember(Order = 4)]
        public string Ip { get; private set; }

        UserLoginFailureReported() {}

        public UserLoginFailureReported(UserId id, DateTime timeUtc, SecurityId securityId, string ip)
        {
            Id = id;
            TimeUtc = timeUtc;
            SecurityId = securityId;
            Ip = ip;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class ReportUserLoginSuccess : ICommand<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public DateTime TimeUtc { get; private set; }

        [DataMember(Order = 3)]
        public string Ip { get; private set; }

        ReportUserLoginSuccess() {}

        public ReportUserLoginSuccess(UserId id, DateTime timeUtc, string ip)
        {
            Id = id;
            TimeUtc = timeUtc;
            Ip = ip;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class UserLoginSuccessReported : IEvent<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public DateTime TimeUtc { get; private set; }

        [DataMember(Order = 3)]
        public SecurityId SecurityId { get; private set; }

        [DataMember(Order = 4)]
        public string Ip { get; private set; }

        UserLoginSuccessReported() {}

        public UserLoginSuccessReported(UserId id, DateTime timeUtc, SecurityId securityId, string ip)
        {
            Id = id;
            TimeUtc = timeUtc;
            SecurityId = securityId;
            Ip = ip;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class LockUser : ICommand<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public string LockReason { get; private set; }

        LockUser() {}

        public LockUser(UserId id, string lockReason)
        {
            Id = id;
            LockReason = lockReason;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class UserLocked : IEvent<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public string LockReason { get; private set; }

        [DataMember(Order = 3)]
        public SecurityId SecurityId { get; private set; }

        [DataMember(Order = 4)]
        public DateTime LockedTillUtc { get; private set; }

        UserLocked() {}

        public UserLocked(UserId id, string lockReason, SecurityId securityId, DateTime lockedTillUtc)
        {
            Id = id;
            LockReason = lockReason;
            SecurityId = securityId;
            LockedTillUtc = lockedTillUtc;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class UnlockUser : ICommand<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public string UnlockReason { get; private set; }

        UnlockUser() {}

        public UnlockUser(UserId id, string unlockReason)
        {
            Id = id;
            UnlockReason = unlockReason;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class UserUnlocked : IEvent<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public string UnlockReason { get; private set; }

        [DataMember(Order = 3)]
        public SecurityId SecurityId { get; private set; }

        UserUnlocked() {}

        public UserUnlocked(UserId id, string unlockReason, SecurityId securityId)
        {
            Id = id;
            UnlockReason = unlockReason;
            SecurityId = securityId;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class DeleteUser : ICommand<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        DeleteUser() {}

        public DeleteUser(UserId id)
        {
            Id = id;
        }
    }


    [DataContract(Namespace = "Sample")]
    public class UserDeleted : IEvent<UserId>
    {
        [DataMember(Order = 1)]
        public UserId Id { get; private set; }

        [DataMember(Order = 2)]
        public SecurityId SecurityId { get; private set; }

        UserDeleted() {}

        public UserDeleted(UserId id, SecurityId securityId)
        {
            Id = id;
            SecurityId = securityId;
        }
    }

    public interface IUserApplicationService
    {
        void When(CreateUser c);
        void When(ReportUserLoginFailure c);
        void When(ReportUserLoginSuccess c);
        void When(LockUser c);
        void When(UnlockUser c);
        void When(DeleteUser c);
    }

    public interface IUserState
    {
        void When(UserCreated e);
        void When(UserLoginFailureReported e);
        void When(UserLoginSuccessReported e);
        void When(UserLocked e);
        void When(UserUnlocked e);
        void When(UserDeleted e);
    }

    public interface ISecurityApplicationService
    {
        void When(CreateSecurityAggregate c);
        void When(CreateSecurityFromRegistration c);
        void When(AddSecurityPassword c);
        void When(AddSecurityIdentity c);
        void When(RemoveSecurityItem c);
        void When(UpdateSecurityItemDisplayName c);
        void When(AddPermissionToSecurityItem c);
    }

    public interface ISecurityState
    {
        void When(SecurityAggregateCreated e);
        void When(SecurityPasswordAdded e);
        void When(SecurityIdentityAdded e);
        void When(SecurityItemRemoved e);
        void When(SecurityItemDisplayNameUpdated e);
        void When(SecurityRegistrationProcessCompleted e);
        void When(PermissionAddedToSecurityItem e);
    }

    #endregion
}