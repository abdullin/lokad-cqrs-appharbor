let user = UserId UserId;
let registration = RegistrationId RegistrationId;
let security = SecurityId SecurityId;
let customer = CustomerId CustomerId;

// common
let description = string Description;
let dateUtc = DateTime DateUtc;
let timeUtc = DateTime TimeUtc;
let email = Email Email;


using ? = ISampleCommand;
using ! = ISampleEvent;



// SERVICES

using ? = IFunctionalCommand;
using ! = IFunctionalEvent;

InstanceStarted!(string codeVersion, string role, string instance)
SendMailMessage?(Email[] to, string subject, string body, bool isHtml, Email[] cc,  Email optionalSender, Email optionalReplyTo)
MailMessageSent!(ref SendMailMessage)



entity Security (SecurityId Id) 
// ============================
// Matches to the customer/account but represents security details

using ? = ICommand<SecurityId>;
using ! = IEvent<SecurityId>;
let display = string displayName;
let token = string token;

CreateSecurityAggregate? ()
CreateSecurityFromRegistration? (registration, string login, string pwd, display, string optionalIdentity)
SecurityAggregateCreated! ()


AddSecurityPassword? (display, string login, string password)
SecurityPasswordAdded! (user, display, string login, string passwordHash, string passwordSalt, string token)

AddSecurityIdentity? (display, string identity)
SecurityIdentityAdded! (user, display, string identity, string token)

 
RemoveSecurityItem? (user)
SecurityItemRemoved! (user, string lookup, string type)

UpdateSecurityItemDisplayName? (user, display)
SecurityItemDisplayNameUpdated! (user, display)

SecurityRegistrationProcessCompleted! (display, user, token, registration)

AddPermissionToSecurityItem? (user, string permission)
PermissionAddedToSecurityItem! (user, display, string permission, token)


entity User (UserId id); 
// =====================
// holds login information about specific and unique user

using ? = ICommand<UserId>;
using ! = IEvent<UserId>;

CreateUser? (security)
UserCreated! (security, TimeSpan activityThreshold)

ReportUserLoginFailure? (DateTime timeUtc, string ip)
UserLoginFailureReported! (DateTime timeUtc, security, string ip)

ReportUserLoginSuccess? (DateTime timeUtc, string ip)
UserLoginSuccessReported! (DateTime timeUtc, security, string ip)

LockUser? (string lockReason)
UserLocked! (string lockReason, security, DateTime lockedTillUtc)

UnlockUser? (string unlockReason)
UserUnlocked! (string unlockReason, security)

DeleteUser? ()
UserDeleted! (security)


entity Registration (RegistrationId id);
// =====================================
using ? = ICommand<RegistrationId>;
using ! = IEvent<RegistrationId>;

RegistrationHttpHeader(string key, string value)

RegistrationInfo(
  string ContactEmail, 
  string CustomerName, 
  string OptionalUserIdentity,
  string OptionalUserPassword,
  string OptionalCompanyPhone,
  string OptionalCompanyUrl,
  string OptionalUserDisplay,
  RegistrationHttpHeader[] headers,
  DateTime CreatedUtc)

CreateRegistration? (RegistrationInfo info)

RegistrationFailed! (RegistrationInfo info, string[] problems)
RegistrationCreated! (DateTime registeredUtc, CustomerInfo customer, SecurityInfo security)
    CustomerInfo(customer, string companyName, string realName, string customerEmail, string optionalPhone, string optionalUrl)
    SecurityInfo(security, string login, string pwd, string userDisplay, string optionalIdentity)



AttachUserToRegistration? (user, string userDisplay, string token)
UserAttachedToRegistration! (user, string userDisplay, string token)
RegistrationSucceeded! (customer, security, user, string userDisplayName, string userToken)
// This is not worth putting into a separate bounded context